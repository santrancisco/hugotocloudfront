# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: jeremyandjames

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: go1.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1
# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: 
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${env:BUCKETNAME}
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:DeleteObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${env:BUCKETNAME}
            - "/*"

# you can add CloudFormation resource templates here
resources:
  Resources:
    WebAppstaticBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:BUCKETNAME}
        WebsiteConfiguration:
          IndexDocument: index.html
    # Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppStaticBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppstaticBucket
        PolicyDocument:
          Id: AllowPublicAccess
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${env:BUCKETNAME}/*
    CloudFrontCDN:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - jeremyandjames.com
          Enabled: "true"
          DefaultRootObject: "index.html"
# The default caching applies to the default (root) objects, not to images etc...
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            MinTTL: "0"
            MaxTTL: "86400"
            DefaultTTL: "60"
            TargetOriginId: myS3Origin
            ForwardedValues:
              QueryString: 'false'
            ViewerProtocolPolicy: redirect-to-https
# Here is example that we can define a second behaviour of how we cache responses for /api and target an api gateway(run lambda for example)
          # CacheBehaviors:
          # - AllowedMethods:
          #   - GET
          #   - HEAD
          #   - POST
          #   TargetOriginId: myS3Origin #For API example below, we an target myAPIOrigin
          #   ForwardedValues:
          #     QueryString: "false"
          #   ViewerProtocolPolicy: https-only
          #   MinTTL: "0"
          #   MaxTTL: "0"
          #   DefaultTTL: "0"
          #   PathPattern: api/*
          Origins:
# Here is the origin from S3...
            - DomainName: ${env:BUCKETNAME}.s3.amazonaws.com
              # OriginPath: /
              ## An identifier for the origin which must be unique within the distribution
              Id: myS3Origin
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              # If we use this, it would have been better as we can hide our bucket but getting it to work is a pain
              # S3OriginConfig:
              #   # OriginAccessIdentity: ""
              #   OriginAccessIdentity: origin-access-identity/cloudfront/${env:CLOUDFRONT_ORIGINID}
# here is an example of apigateway origin (eg using lambda backend)
            # - DomainName:
            #    Fn::Join:
            #     - ""
            #     - - Ref: ApiGatewayRestApi
            #       - ".execute-api.${env:region}.amazonaws.com"
            #   Id: myAPIOrigin
            #   OriginPath: /api
            #   CustomOriginConfig:
            #     OriginProtocolPolicy: https-only
# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  hugotos3:
    events:
      - http:
          path: github
          method: get
          private: false
          integration: lambda-proxy
      - http:
          path: github
          method: post
          private: false
          integration: lambda-proxy
    handler: bin/hugotos3
    environment:
      WEBHOOK_SECRET: ${env:WEBHOOK_SECRET}
      BUCKETNAME: ${env:BUCKETNAME}
      OWNER:    ${env:OWNER}
      REPONAME: ${env:REPONAME}
      SITEHOST: ${env:SITEHOST}
      REGION: ${env:region}
      SLACK_WEBHOOK: ${env:SLACK_WEBHOOK}


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

